<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pattern & Space Detectives: The Great Comparison Adventure!</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Fredoka:wght@300;400;500;600;700&display=swap');
        
        :root {
            --primary: #9C27B0;
            --secondary: #FF9800;
            --primary-dark: #7B1FA2;
            --secondary-dark: #F57C00;
            --success-color: #4CAF50;
            --error-color: #F44336;
            --background-color: #F3E5F5;
            --text-color: #263238;
            --white: #FFFFFF;
            --shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
            --border-radius: 20px;
        }

        body {
            font-family: 'Fredoka', sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            overflow: hidden;
        }

        .game-container {
            width: 95vw;
            height: 95vh;
            max-width: 1200px;
            max-height: 800px;
            background-color: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            position: relative;
            overflow: hidden;
        }

        .game-view {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            padding: 1.5rem;
            box-sizing: border-box;
        }
        
        .hidden {
            display: none !important;
        }

        .view-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .view-title {
            font-size: clamp(2rem, 5vw, 2.5rem);
            font-weight: 600;
            color: var(--primary);
        }

        .icon-btn {
            background: none;
            border: none;
            font-size: clamp(1.5rem, 3vw, 1.8rem);
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 10px;
            transition: background-color 0.2s, transform 0.2s;
        }
        .icon-btn:hover {
            background-color: rgba(0,0,0,0.05);
            transform: scale(1.1);
        }

        .btn {
            font-family: 'Fredoka', sans-serif;
            font-weight: 600;
            border: none;
            padding: 12px 28px;
            font-size: clamp(1rem, 2.5vw, 1.2rem);
            border-radius: 50px;
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        }
        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.15);
        }
        .btn-primary {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: var(--white);
        }
        .btn-secondary {
            background-color: var(--white);
            color: var(--primary);
            border: 2px solid var(--primary);
        }

        #level-select-screen .content {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            flex-grow: 1;
        }
        .level-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
            width: 100%;
            max-width: 800px;
        }
        .level-tile {
            aspect-ratio: 1;
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: var(--white);
            border-radius: 15px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            font-size: clamp(2rem, 5vw, 3rem);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            position: relative;
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        }
        .level-tile:hover {
            transform: scale(1.05);
        }
        .level-tile .level-name {
            font-size: clamp(1rem, 2.5vw, 1.2rem);
            margin-top: 0.5rem;
        }
        .level-tile .level-icon {
            font-size: clamp(3rem, 7vw, 4rem);
            margin-bottom: 0.5rem;
        }

        #game-screen {
            padding: 0;
        }
        #game-header {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: var(--white);
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        #game-prompt {
            font-size: clamp(1.2rem, 3vw, 1.5rem);
            font-weight: 600;
        }
        #scene-container {
            position: relative;
            width: 100%;
            height: calc(100% - 70px);
            background-image: url('https://www.transparenttextures.com/patterns/cubes.png'), linear-gradient(to bottom, #f3e5f5 0%, #ffffff 100%);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 2rem;
            box-sizing: border-box;
        }

        /* Pattern Game Styles */
        .pattern-container {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            justify-content: center;
        }
        .pattern-item {
            width: clamp(80px, 12vw, 100px);
            height: clamp(80px, 12vw, 100px);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: clamp(3rem, 8vw, 4rem);
            border-radius: 15px;
            background-color: rgba(156, 39, 176, 0.1);
        }
        .pattern-item.question {
            border: 3px dashed var(--primary);
            background-color: transparent;
        }
        .pattern-options {
            display: flex;
            gap: 1.5rem;
            margin-top: 2rem;
            flex-wrap: wrap;
            justify-content: center;
        }
        .pattern-option {
            width: clamp(80px, 12vw, 100px);
            height: clamp(80px, 12vw, 100px);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: clamp(3rem, 8vw, 4rem);
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.2s;
            background-color: var(--white);
            border: 2px solid var(--primary);
        }
        .pattern-option:hover {
            transform: scale(1.05);
            background-color: rgba(156, 39, 176, 0.1);
        }
        .pattern-option.selected {
            background-color: var(--primary);
            color: var(--white);
        }

        /* Space Game Styles */
        .space-scene {
            position: relative;
            width: 100%;
            max-width: 600px;
            height: 400px;
            background-color: #E1F5FE;
            border-radius: 20px;
            margin-bottom: 2rem;
            overflow: hidden;
        }
        .space-object {
            position: absolute;
            font-size: clamp(4rem, 10vw, 6rem);
            cursor: pointer;
            transition: transform 0.2s;
        }
        .space-object:hover {
            transform: scale(1.1);
        }
        .space-object.selected {
            animation: bounce 0.5s;
        }
        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-15px); }
        }
        .space-options {
            display: flex;
            gap: 1.5rem;
            margin-top: 1rem;
            flex-wrap: wrap;
            justify-content: center;
        }
        .space-option {
            padding: 12px 24px;
            font-size: clamp(1.2rem, 3vw, 1.4rem);
            border: 2px solid var(--primary);
            background-color: var(--white);
            color: var(--primary);
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.2s;
            font-family: 'Fredoka', sans-serif;
            font-weight: 600;
        }
        .space-option:hover {
            background-color: var(--primary);
            color: var(--white);
        }

        /* Comparison Game Styles */
        .comparison-container {
            display: flex;
            justify-content: space-around;
            align-items: center;
            width: 100%;
            margin-bottom: 2rem;
            flex-wrap: wrap;
        }
        .comparison-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            cursor: pointer;
            transition: transform 0.2s ease;
            user-select: none;
            margin: 1rem;
        }
        .comparison-item:hover {
            transform: scale(1.05);
        }
        .comparison-item.selected {
            animation: bounce 0.5s;
        }
        .comparison-icon {
            font-size: clamp(5rem, 12vw, 7rem);
            margin-bottom: 0.5rem;
        }
        .comparison-label {
            font-size: clamp(1.2rem, 3vw, 1.4rem);
            font-weight: 500;
        }
        .comparison-buttons {
            display: flex;
            gap: 1.5rem;
            margin-top: 1rem;
            flex-wrap: wrap;
            justify-content: center;
        }
        .comparison-btn {
            padding: 12px 24px;
            font-size: clamp(1.2rem, 3vw, 1.4rem);
            border: 2px solid var(--primary);
            background-color: var(--white);
            color: var(--primary);
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.2s;
            font-family: 'Fredoka', sans-serif;
            font-weight: 600;
        }
        .comparison-btn:hover {
            background-color: var(--primary);
            color: var(--white);
        }

        .modal {
            display: none; 
            position: fixed; 
            z-index: 1000; 
            left: 0;
            top: 0;
            width: 100%; 
            height: 100%; 
            background-color: rgba(0,0,0,0.6); 
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background-color: var(--white);
            padding: 2.5rem;
            border-radius: var(--border-radius);
            text-align: center;
            box-shadow: 0 10px 40px rgba(0,0,0,0.2);
            animation: bounce-in 0.5s;
            max-width: 500px;
            width: 90%;
        }
        @keyframes bounce-in {
            0% { transform: scale(0.7); opacity: 0; }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); opacity: 1; }
        }
        .modal-content h2 {
            margin-top: 0;
            font-size: clamp(1.8rem, 4vw, 2.2rem);
            color: var(--primary);
        }
        .modal-content .icon {
            font-size: clamp(5rem, 12vw, 6rem);
            margin: 1rem 0;
        }
        .modal-content p {
            font-size: clamp(1.2rem, 3vw, 1.4rem);
            margin: 1rem 0;
        }
        .modal-actions {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin-top: 1.5rem;
        }

        .notification {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%) translateY(-100px);
            background-color: var(--success-color);
            color: var(--white);
            padding: 1rem 2rem;
            border-radius: 50px;
            font-size: clamp(1.2rem, 3vw, 1.4rem);
            font-weight: 600;
            box-shadow: var(--shadow);
            z-index: 2000;
            opacity: 0;
            transition: transform 0.5s ease, opacity 0.5s ease;
        }
        .notification.show {
            transform: translateX(-50%) translateY(0);
            opacity: 1;
        }
        .notification.error {
            background-color: var(--error-color);
        }
    </style>
</head>
<body>

    <div class="game-container">
        <!-- Level Select Screen -->
        <div id="level-select-screen" class="game-view">
            <div class="view-header">
                <h1 class="view-title">Pattern & Space Detectives</h1>
                <div></div>
            </div>
            <div class="content">
                <h2 style="color: var(--primary); margin-bottom: 1rem; font-size: clamp(1.5rem, 4vw, 1.8rem);">Choose a Level</h2>
                <div class="level-grid" id="level-grid">
                    <!-- Level tiles will be injected here -->
                </div>
            </div>
        </div>

        <!-- Game Screen -->
        <div id="game-screen" class="game-view hidden">
            <div id="game-header">
                <div id="game-prompt">Complete the pattern!</div>
                <button class="icon-btn" id="game-pause-btn">⬅️</button>
            </div>
            <div id="scene-container">
                <!-- Game content will be dynamically added here -->
            </div>
        </div>
    </div>

    <!-- Modal for Answering -->
    <div id="answer-modal" class="modal">
        <div class="modal-content">
            <h2>Great job!</h2>
            <div class="icon" id="modal-question-icon">🎉</div>
            <p id="modal-message">You're getting good at this!</p>
            <div class="modal-actions">
                <button class="btn btn-primary" id="continue-btn">Continue</button>
            </div>
        </div>
    </div>

    <!-- Notification Toast -->
    <div id="notification" class="notification"></div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        // DOM Elements
        const views = {
            levelSelect: document.getElementById('level-select-screen'),
            game: document.getElementById('game-screen')
        };
        const modals = {
            answer: document.getElementById('answer-modal')
        };
        const notificationEl = document.getElementById('notification');

        // Game State
        const gameState = {
            currentLevel: null,
            currentLevelData: null,
            gameType: null,
            selectedAnswer: null
        };

        // Pattern Data
        const patternData = {
            shapes: {
                circle: '⭕',
                square: '⬜',
                triangle: '🔺',
                star: '⭐'
            },
            colors: {
                red: '🟥',
                blue: '🟦',
                green: '🟩',
                yellow: '🟨'
            }
        };

        // Level Data - Simplified to 5 levels
        const levelsData = [
            // Pattern Level 1
            { 
                id: 1, 
                name: "Shape Patterns", 
                type: "pattern",
                icon: "🔷",
                pattern: ["circle", "square", "circle", "square", "circle", "?"],
                options: ["circle", "square", "triangle"],
                correct: "square"
            },
            // Space Level 1
            { 
                id: 2, 
                name: "Above and Below", 
                type: "space",
                icon: "🔼",
                scene: {
                    objects: [
                        { id: "bird", icon: "🐦", position: { top: "20%", left: "50%" } },
                        { id: "tree", icon: "🌳", position: { top: "60%", left: "50%" } }
                    ],
                    question: "Which is above the tree?",
                    options: ["bird", "tree"],
                    correct: "bird"
                }
            },
            // Comparison Level 1
            { 
                id: 3, 
                name: "Size Comparison", 
                type: "comparison",
                icon: "📏",
                objects: [
                    { id: "elephant", icon: "🐘" },
                    { id: "mouse", icon: "🐭" }
                ],
                question: "Which is bigger?",
                options: ["elephant", "mouse"],
                correct: "elephant"
            },
            // Pattern Level 2
            { 
                id: 4, 
                name: "Color Patterns", 
                type: "pattern",
                icon: "🔴",
                pattern: ["red", "blue", "red", "blue", "red", "?"],
                options: ["red", "blue", "green"],
                correct: "blue"
            },
            // Space Level 2
            { 
                id: 5, 
                name: "Left and Right", 
                type: "space",
                icon: "◀️",
                scene: {
                    objects: [
                        { id: "cat", icon: "🐱", position: { top: "50%", left: "30%" } },
                        { id: "dog", icon: "🐶", position: { top: "50%", left: "70%" } }
                    ],
                    question: "Which is on the left?",
                    options: ["cat", "dog"],
                    correct: "cat"
                }
            }
        ];

        // Screen Management
        function switchView(viewName) {
            Object.values(views).forEach(view => view.classList.add('hidden'));
            views[viewName].classList.remove('hidden');
        }

        function showNotification(message, duration = 2000, isError = false) {
            notificationEl.textContent = message;
            notificationEl.classList.toggle('error', isError);
            notificationEl.classList.add('show');
            setTimeout(() => notificationEl.classList.remove('show'), duration);
        }

        // Screen Rendering
        function renderLevelSelect() {
            const grid = document.getElementById('level-grid');
            grid.innerHTML = '';
            
            levelsData.forEach(level => {
                const tile = document.createElement('div');
                tile.className = 'level-tile';
                tile.innerHTML = `
                    <div class="level-icon">${level.icon}</div>
                    <div class="level-name">${level.name}</div>
                `;
                tile.onclick = () => startLevel(level.id);
                grid.appendChild(tile);
            });
        }

        // Game Logic
        function startLevel(levelId) {
            gameState.currentLevel = levelId;
            gameState.currentLevelData = levelsData.find(l => l.id === levelId);
            gameState.gameType = gameState.currentLevelData.type;
            gameState.selectedAnswer = null;
            
            if (gameState.gameType === 'pattern') {
                setupPatternGame();
            } else if (gameState.gameType === 'space') {
                setupSpaceGame();
            } else if (gameState.gameType === 'comparison') {
                setupComparisonGame();
            }
            
            switchView('game');
        }

        function setupPatternGame() {
            const sceneContainer = document.getElementById('scene-container');
            sceneContainer.innerHTML = '';
            
            const patternContainer = document.createElement('div');
            patternContainer.className = 'pattern-container';
            
            const pattern = gameState.currentLevelData.pattern;
            pattern.forEach((item, index) => {
                const patternItem = document.createElement('div');
                patternItem.className = 'pattern-item';
                
                if (item === '?') {
                    patternItem.classList.add('question');
                    patternItem.dataset.answerSlot = 'true';
                } else {
                    patternItem.textContent = patternData.shapes[item] || patternData.colors[item];
                }
                
                patternContainer.appendChild(patternItem);
            });
            
            sceneContainer.appendChild(patternContainer);
            
            const optionsContainer = document.createElement('div');
            optionsContainer.className = 'pattern-options';
            
            gameState.currentLevelData.options.forEach(option => {
                const optionEl = document.createElement('div');
                optionEl.className = 'pattern-option';
                optionEl.dataset.answer = option;
                optionEl.textContent = patternData.shapes[option] || patternData.colors[option];
                optionEl.onclick = () => selectPatternOption(option);
                optionsContainer.appendChild(optionEl);
            });
            
            sceneContainer.appendChild(optionsContainer);
            
            document.getElementById('game-prompt').textContent = 'Complete the pattern!';
        }

        function selectPatternOption(option) {
            document.querySelectorAll('.pattern-option').forEach(opt => {
                opt.classList.remove('selected');
            });
            
            const selectedEl = document.querySelector(`[data-answer="${option}"]`);
            selectedEl.classList.add('selected');
            
            gameState.selectedAnswer = option;
            checkPatternAnswer();
        }

        function checkPatternAnswer() {
            if (gameState.selectedAnswer === gameState.currentLevelData.correct) {
                showNotification("Correct! Great job!");
                
                const modalIcon = document.getElementById('modal-question-icon');
                const modalMessage = document.getElementById('modal-message');
                modalIcon.textContent = '🎉';
                modalMessage.textContent = 'You completed the pattern correctly!';
                modals.answer.style.display = 'flex';
                
                setTimeout(() => {
                    onLevelComplete();
                }, 2000);
            } else {
                showNotification("Oops, that's not right. Try again!", 1500, true);
                
                const selectedEl = document.querySelector(`[data-answer="${gameState.selectedAnswer}"]`);
                selectedEl.classList.add('incorrect-shake');
                setTimeout(() => selectedEl.classList.remove('incorrect-shake'), 500);
            }
        }

        function setupSpaceGame() {
            const sceneContainer = document.getElementById('scene-container');
            sceneContainer.innerHTML = '';
            
            const spaceScene = document.createElement('div');
            spaceScene.className = 'space-scene';
            
            const scene = gameState.currentLevelData.scene;
            scene.objects.forEach(obj => {
                const objEl = document.createElement('div');
                objEl.className = 'space-object';
                objEl.id = obj.id;
                objEl.textContent = obj.icon;
                objEl.style.top = obj.position.top;
                objEl.style.left = obj.position.left;
                objEl.style.transform = 'translate(-50%, -50%)';
                
                objEl.onclick = () => selectSpaceObject(obj.id);
                
                spaceScene.appendChild(objEl);
            });
            
            sceneContainer.appendChild(spaceScene);
            
            const optionsContainer = document.createElement('div');
            optionsContainer.className = 'space-options';
            
            gameState.currentLevelData.options.forEach(option => {
                const optionEl = document.createElement('button');
                optionEl.className = 'space-option';
                optionEl.textContent = option;
                optionEl.onclick = () => checkSpaceAnswer(option);
                optionsContainer.appendChild(optionEl);
            });
            
            sceneContainer.appendChild(optionsContainer);
            
            document.getElementById('game-prompt').textContent = scene.question;
        }

        function selectSpaceObject(objectId) {
            document.querySelectorAll('.space-object').forEach(obj => {
                obj.classList.remove('selected');
            });
            
            const selectedEl = document.getElementById(objectId);
            selectedEl.classList.add('selected');
            
            gameState.selectedAnswer = objectId;
        }

        function checkSpaceAnswer(option) {
            if (!gameState.selectedAnswer) {
                showNotification("Please select an object first!", 1500, true);
                return;
            }
            
            if (gameState.selectedAnswer === gameState.currentLevelData.correct) {
                showNotification("Correct! Great job!");
                
                const modalIcon = document.getElementById('modal-question-icon');
                const modalMessage = document.getElementById('modal-message');
                modalIcon.textContent = '🎉';
                modalMessage.textContent = 'You got it right!';
                modals.answer.style.display = 'flex';
                
                setTimeout(() => {
                    onLevelComplete();
                }, 2000);
            } else {
                showNotification("Oops, that's not right. Try again!", 1500, true);
                
                const selectedEl = document.getElementById(gameState.selectedAnswer);
                selectedEl.classList.add('incorrect-shake');
                setTimeout(() => selectedEl.classList.remove('incorrect-shake'), 500);
            }
        }

        function setupComparisonGame() {
            const sceneContainer = document.getElementById('scene-container');
            sceneContainer.innerHTML = '';
            
            const comparisonContainer = document.createElement('div');
            comparisonContainer.className = 'comparison-container';
            
            gameState.currentLevelData.objects.forEach(obj => {
                const objEl = document.createElement('div');
                objEl.className = 'comparison-item';
                objEl.dataset.objectId = obj.id;
                objEl.innerHTML = `
                    <div class="comparison-icon">${obj.icon}</div>
                    <div class="comparison-label">${obj.id}</div>
                `;
                objEl.onclick = () => selectComparisonObject(obj.id);
                comparisonContainer.appendChild(objEl);
            });
            
            sceneContainer.appendChild(comparisonContainer);
            
            document.getElementById('game-prompt').textContent = gameState.currentLevelData.question;
        }

        function selectComparisonObject(objectId) {
            document.querySelectorAll('.comparison-item').forEach(item => {
                item.classList.remove('selected');
            });
            
            const selectedEl = document.querySelector(`[data-object-id="${objectId}"]`);
            selectedEl.classList.add('selected');
            
            gameState.selectedAnswer = objectId;
            checkComparisonAnswer();
        }

        function checkComparisonAnswer() {
            if (gameState.selectedAnswer === gameState.currentLevelData.correct) {
                showNotification("Correct! Great job!");
                
                const modalIcon = document.getElementById('modal-question-icon');
                const modalMessage = document.getElementById('modal-message');
                modalIcon.textContent = '🎉';
                modalMessage.textContent = 'You got it right!';
                modals.answer.style.display = 'flex';
                
                setTimeout(() => {
                    onLevelComplete();
                }, 2000);
            } else {
                showNotification("Oops, that's not right. Try again!", 1500, true);
                
                const selectedEl = document.querySelector(`[data-object-id="${gameState.selectedAnswer}"]`);
                selectedEl.classList.add('incorrect-shake');
                setTimeout(() => selectedEl.classList.remove('incorrect-shake'), 500);
            }
        }
        
        function onLevelComplete() {
            showNotification(`🎉 Level Complete! 🎉`, 3000);
            
            setTimeout(() => {
                renderLevelSelect();
                switchView('levelSelect');
            }, 3000);
        }

        // Event Listeners
        document.getElementById('game-pause-btn').addEventListener('click', () => {
            if (confirm('Are you sure you want to quit this level?')) {
                renderLevelSelect();
                switchView('levelSelect');
            }
        });
        
        document.getElementById('continue-btn').addEventListener('click', () => {
            modals.answer.style.display = 'none';
        });

        modals.answer.addEventListener('click', (e) => {
            if (e.target === modals.answer) {
                modals.answer.style.display = 'none';
            }
        });

        // Initial Load
        renderLevelSelect();
    });
    </script>
</body>
</html>
